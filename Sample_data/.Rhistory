group_by(Compartment) %>%
filter(probScore > 0) %>%
mutate_at(vars(Compartment),
list(factor))
ggplot(datBOX, aes(Compartment, probScore)) +
geom_boxplot(aes(fill=Compartment))
# define training control using k-fold Cross Validation
train_control <-
trainControl(method="cv",
classProbs=TRUE,
number=10, verbose = T,savePred=T)
#train the classifier (e.g, random forest)
set.seed(100)
rfModel <-
train(Marker~., data=x_train,
trControl=train_control,
method="rf",
preProcess = c("center", "scale"),
metric= "Accuracy",
tuneLength = 5)
#Evalute the result based on confusion matrix
rf_pred <-
predict(rfModel,x_train[,-7])
rf_pred <-
confusionMatrix(rf_pred, x_train$Marker)
message("confusion matrix for original data")
print(rf_pred)
#predict
predictdf <-
df %>%
as.data.frame(.) %>%
set_rownames(.$Gene) %>%
dplyr::select(-c(1,8))
set.seed(101)
datPred  <-
predict(rfModel,predictdf, type = "prob")
#organelle-specific score distributions
datBOX <-
datPred %>%
gather("Compartment", "probScore", 1:10) %>%
group_by(Compartment) %>%
filter(probScore > 0) %>%
mutate_at(vars(Compartment),
list(factor))
ggplot(datBOX, aes(Compartment, probScore)) +
geom_boxplot(aes(fill=Compartment))
#organelle-specific score distributions
datBOX <-
datPred %>%
gather("Compartment", "probScore", 1:10) %>%
group_by(Compartment) %>%
filter(probScore > 0.1) %>%
mutate_at(vars(Compartment),
list(factor))
ggplot(datBOX, aes(Compartment, probScore)) +
geom_boxplot(aes(fill=Compartment))
ggplot(datBOX, aes(Compartment, probScore)) +
geom_boxplot(aes(fill=Compartment))+
boxplot()
#organelle-specific score distributions
datBOX <-
datPred %>%
gather("Compartment", "probScore", 1:10) %>%
group_by(Compartment) %>%
filter(Compartment != "unknown") %>%
filter(probScore > 0.1) %>%
mutate_at(vars(Compartment),
list(factor))
ggplot(datBOX, aes(Compartment, probScore)) +
geom_boxplot(aes(fill=Compartment))
ggplot(datBOX, aes(Compartment, probScore)) +
geom_boxplot(aes(fill=Compartment)) +
geom_hline(yintercept=0.5, linetype="dashed",
color = "red", size=2)
ggplot(datBOX, aes(Compartment, probScore)) +
geom_boxplot(aes(fill=Compartment)) +
geom_hline(yintercept=0.5, linetype="dashed",
color = "red", size=1)
ggplot(datBOX, aes(Compartment, probScore)) +
geom_boxplot(aes(fill=Compartment)) +
geom_hline(yintercept=0.5, linetype="dashed",
color = "red", size=1) +
theme_bw()
table(datBOX$Compartment,datBOX$probScore)
table(datBOX$probScore,datBOX$Compartment)
#organelle-specific score distributions
datBOX <-
datPred %>%
gather("Compartment", "probScore", 1:10) %>%
group_by(Compartment) %>%
filter(probScore >= 0.5) %>%
summarise(count = n())
#number of proteins assigned to each compartment at probScore >= 0.5
Assigned_Comp <-
datPred %>%
gather("Compartment", "probScore", 1:10) %>%
group_by(Compartment) %>%
filter(probScore >= 0.5) %>%
summarise(count = n())
View(Assigned_Comp)
#organelle-specific score distributions
datBOX <-
datPred %>%
gather("Compartment", "probScore", 1:10) %>%
group_by(Compartment) %>%
filter(Compartment != "unknown") %>%
filter(probScore > 0.1) %>%
mutate_at(vars(Compartment),
list(factor))
#Visualize the result on PCA
s <-
datPred %>%
tibble::rownames_to_column('gene')
View(s)
#Visualize the result on PCA
s <-
datPred %>%
tibble::rownames_to_column('gene') %>%
gather("Compartment", "probScore", 2:10) %>%
group_by(Compartment)
#Visualize the result on PCA
s <-
datPred %>%
tibble::rownames_to_column('gene')
#Visualize the result on PCA
s <-
datPred %>%
tibble::rownames_to_column('gene') %>%
gather("Compartment", "probScore", 2:11) %>%
group_by(Compartment)
View(df)
#Visualize the result on PCA
s <-
datPred %>%
tibble::rownames_to_column('Gene') %>%
gather("Compartment", "probScore", 2:11) %>%
left_join(.,df)
#Visualize the result on PCA
s <-
datPred %>%
tibble::rownames_to_column('Gene') %>%
gather("Predicted_Compartment", "probScore", 2:11) %>%
left_join(.,df)
#Visualize the result on PCA
s <-
datPred %>%
tibble::rownames_to_column('Gene') %>%
gather("Predicted_Compartment", "probScore", 2:11)
#Visualize the result on PCA
s <-
datPred %>%
tibble::rownames_to_column('Gene') %>%
gather("Predicted_Compartment", "probScore", 2:11) %>%
group_by(Predicted_Compartment) %>%
splice(which.max(probScore))
#Visualize the result on PCA
s <-
datPred %>%
tibble::rownames_to_column('Gene') %>%
gather("Predicted_Compartment", "probScore", 2:11) %>%
group_by(Predicted_Compartment) %>%
slice(which.max(probScore))
#Visualize the result on PCA
s <-
datPred %>%
tibble::rownames_to_column('Gene') %>%
gather("Predicted_Compartment", "probScore", 2:11) %>%
group_by(Predicted_Compartment) %>%
dplyr::slice(which.max(probScore))
View(s)
#Visualize the result on PCA
s <-
datPred %>%
tibble::rownames_to_column('Gene') %>%
gather("Predicted_Compartment", "probScore", 2:11) %>%
group_by(Gene,Predicted_Compartment) %>%
dplyr::slice(which.max(probScore))
View(s)
#Visualize the result on PCA
s <-
datPred %>%
tibble::rownames_to_column('Gene') %>%
gather("Predicted_Compartment", "probScore", 2:11) %>%
group_by(Gene,Predicted_Compartment) %>%
dplyr::slice(which.max(probScore)) %>%
left_join(.,df)
#Visualize the result on PCA
s <-
datPred %>%
tibble::rownames_to_column('Gene') %>%
gather("Predicted_Compartment", "probScore", 2:11) %>%
group_by(Gene,Predicted_Compartment) %>%
dplyr::slice(which.max(probScore))
#Visualize the result on PCA
s <-
datPred %>%
tibble::rownames_to_column('Gene') %>%
gather("Predicted_Compartment", "probScore", 2:11) %>%
group_by(Gene) %>%
dplyr::slice(which.max(probScore))
#Visualize the result on PCA
s <-
datPred %>%
tibble::rownames_to_column('Gene') %>%
gather("Predicted_Compartment", "probScore", 2:11) %>%
group_by(Gene) %>%
dplyr::slice(which.max(probScore))  %>%
left_join(.,df)
#preparer the training data
x_train <-
df %>%
as.data.frame(.) %>%
set_rownames(.$Gene) %>%
dplyr::select(-1)%>%
filter(Marker != "unknown") %>%
mutate_at(vars(Marker),
list(factor))
View(x_train)
x_train$Marker <-
factor(x_train$Marker,
labels = make.names(levels(x_train$Marker)))
# define training control using k-fold Cross Validation
train_control <-
trainControl(method="cv",
classProbs=TRUE,
number=10, verbose = T,savePred=T)
#train the classifier (e.g, random forest)
set.seed(100)
rfModel <-
train(Marker~., data=x_train,
trControl=train_control,
method="rf",
preProcess = c("center", "scale"),
metric= "Accuracy",
tuneLength = 5)
#Evalute the result based on confusion matrix
rf_pred <-
predict(rfModel,x_train[,-7])
rf_pred <-
confusionMatrix(rf_pred, x_train$Marker)
message("confusion matrix for original data")
print(rf_pred)
#predict
predictdf <-
df %>%
as.data.frame(.) %>%
set_rownames(.$Gene) %>%
dplyr::select(-c(1,8))
set.seed(101)
datPred  <-
predict(rfModel,predictdf, type = "prob")
View(datPred)
#organelle-specific score distributions
datBOX <-
datPred %>%
gather("Compartment", "probScore", 1:10) %>%
group_by(Compartment) %>%
filter(probScore > 0.1) %>%
mutate_at(vars(Compartment),
list(factor))
#organelle-specific score distributions
datBOX <-
datPred %>%
gather("Compartment", "probScore", 1:9) %>%
group_by(Compartment) %>%
filter(probScore > 0.1) %>%
mutate_at(vars(Compartment),
list(factor))
ggplot(datBOX, aes(Compartment, probScore)) +
geom_boxplot(aes(fill=Compartment)) +
geom_hline(yintercept=0.5, linetype="dashed", #0.50 cutoff
color = "red", size=1) +
theme_bw() +
#number of proteins assigned to each compartment at probScore >= 0.5
Assigned_Comp <-
datPred %>%
gather("Compartment", "probScore", 1:10) %>%
group_by(Compartment) %>%
filter(probScore >= 0.5) %>%
summarise(count = n())
View(datBOX)
ggplot(datBOX, aes(Compartment, probScore)) +
geom_boxplot(aes(fill=Compartment)) +
geom_hline(yintercept=0.5, linetype="dashed", #0.50 cutoff
color = "red", size=1) +
theme_bw()
#number of proteins assigned to each compartment at probScore >= 0.5
Assigned_Comp <-
datPred %>%
gather("Compartment", "probScore", 1:10) %>%
group_by(Compartment) %>%
filter(probScore >= 0.5) %>%
summarise(count = n())
#number of proteins assigned to each compartment at probScore >= 0.5
Assigned_Comp <-
datPred %>%
gather("Compartment", "probScore", 1:9) %>%
group_by(Compartment) %>%
filter(probScore >= 0.5) %>%
summarise(count = n())
View(Assigned_Comp)
#Visualize the result on PCA
s <-
datPred %>%
tibble::rownames_to_column('Gene') %>%
gather("Predicted_Compartment", "probScore", 2:11) %>%
group_by(Gene) %>%
dplyr::slice(which.max(probScore))  %>%
left_join(.,df)
#Visualize the result on PCA
s <-
datPred %>%
tibble::rownames_to_column('Gene') %>%
gather("Predicted_Compartment", "probScore", 2:10) %>%
group_by(Gene) %>%
dplyr::slice(which.max(probScore))  %>%
left_join(.,df)
pca_res <- #keep the numeric data
prcomp(s[,-c(1,2,10)], scale. = TRUE)
autoplot(pca_res, data = s[,-c(1,2,10)], colour = "Predicted_Compartment") +
theme_bw()
autoplot(pca_res, data = s[,-c(1,10)], colour = "Predicted_Compartment") +
theme_bw()
#Visualize the result on PCA
PCAdf <-
datPred %>%
tibble::rownames_to_column('Gene') %>%
gather("Predicted_Compartment", "probScore", 2:10) %>%
group_by(Gene) %>%
dplyr::slice(which.max(probScore))  %>%
left_join(.,df)
#Visualize the result on PCA
PCAdf <-
datPred %>%
tibble::rownames_to_column('Gene') %>%
gather("Predicted_Compartment", "probScore", 2:10) %>%
group_by(Gene) %>%
dplyr::slice(which.max(probScore))  %>%
left_join(.,df) %>%
dplyr::select(-Marker)
pca_res <- #keep the numeric data
prcomp(s[,-c(1,2,10)], scale. = TRUE)
autoplot(pca_res, data = s[,-c(1,10)], colour = "Predicted_Compartment") +
theme_bw()
View(PCAdf)
View(x_train)
rfModel
print(rf_pred)
#Predict on the whole data
predictdf <-
df %>%
as.data.frame(.) %>%
set_rownames(.$Gene) %>%
dplyr::select(-c(1,8))
View(predictdf)
predictdf  <-
predict(rfModel,predictdf, type = "prob")
#Visualize the finalresult on PCA
finaldf <-
datPred %>%
tibble::rownames_to_column('Gene') %>%
gather("Predicted_Compartment", "probScore", 2:10) %>%
group_by(Gene) %>%
dplyr::slice(which.max(probScore))  %>%
left_join(.,df) %>%
dplyr::select(-Marker)
pca_res <- #keep the numeric data
prcomp(finaldf[,-c(1,2,10)], scale. = TRUE)
#Visualize the finalresult on PCA
finaldf <-
datPred %>%
tibble::rownames_to_column('Gene') %>%
gather("Predicted_Compartment", "probScore", 2:10) %>%
group_by(Gene) %>%
dplyr::slice(which.max(probScore))  %>%
left_join(.,df) %>%
dplyr::select(-Marker)
pca_res <- #keep the numeric data
prcomp(finaldf[,-c(1,2)], scale. = TRUE)
autoplot(pca_res, data = finaldf[,-c(1)], colour = "Predicted_Compartment") +
theme_bw()
pp <-
finaldf %>%
filter(Predicted_Compartment == "cytosol")
View(pp)
pp <-
finaldf %>%
filter(Predicted_Compartment == "Mitochondria")
pp <-
finaldf %>%
filter(Predicted_Compartment == "Mitochondria") %>%
dplyr::select(c(1,4:9))
pp <-
finaldf %>%
filter(Predicted_Compartment == "Mitochondria") %>%
dplyr::select(c(4:9))
pp <-
finaldf %>%
filter(Predicted_Compartment == "Mitochondria") %>%
dplyr::select(c(4:9))
pp <-
finaldf %>%
filter(Predicted_Compartment == "Mitochondria") %>%
dplyr::select(c(4:9))
View(finaldf)
pp <-
finaldf %>%
filter(Predicted_Compartment == "Mitochondria") %>%
dplyr::select(c(4:9))
ss <-
finaldf %>%
filter(Predicted_Compartment == "Mitochondria") %>%
dplyr::select(c(4:9))
View(ss)
ss <-
finaldf %>%
filter(Predicted_Compartment == "Mitochondria") %>%
dplyr::select(-c(3,2,1))
ss <-
finaldf %>%
filter(Predicted_Compartment == "Mitochondria") %>%
dplyr::select(-c(3,2,1)) %>%
dplyr::select(-Gene)
ss <-
finaldf %>%
filter(Predicted_Compartment == "Mitochondria")
#Visualize the finalresult on PCA
finaldf <-
datPred %>%
tibble::rownames_to_column('Gene') %>%
gather("Predicted_Compartment", "probScore", 2:10) %>%
group_by(Gene) %>%
dplyr::slice(which.max(probScore))  %>%
left_join(.,df) %>%
dplyr::select(-Marker) %>%
ungroup()
ss <-
finaldf %>%
filter(Predicted_Compartment == "Mitochondria") %>%
dplyr::select(c(4:9))
ss <-
finaldf %>%
filter(Predicted_Compartment == "Mitochondria") %>%
dplyr::select(c(4:9)) %>%
gather("condition", "intensity", 1:6)
plot(ss$condition,ss$intensity)
ggplot(data=ss, aes(x=ss$condition, y=ss$intensity, group=1)) +
geom_line(linetype = "dashed")+
geom_point()
ggplot(data=ss, aes(x=ss$condition, y=ss$intensity)) +
geom_line(linetype = "dashed")+
geom_point()
ggplot(data=ss, aes(x=ss$condition, y=ss$intensity)) +
geom_point()
ggplot(data=ss, aes(x=ss$condition, y=ss$intensity)) +
geom_line(linetype = "dashed")+
geom_point()
ggplot(data=ss, aes(x=condition, y=intensity)) +
geom_line()+
geom_point()
df <- data.frame(dose=c("D0.5", "D1", "D2"),
len=c(4.2, 10, 29.5))
View(df)
# Basic line plot with points
ggplot(data=df, aes(x=dose, y=len, group=1)) +
geom_line()+
geom_point()
ggplot(data=ss, aes(x=condition, y=intensity)) +
geom_line()+
geom_point()
ggplot(data=ss, aes(x=condition, y=intensity)) +
geom_line()
str(df)
str(ss)
ss <-
finaldf %>%
filter(Predicted_Compartment == "Mitochondria") %>%
dplyr::select(c(1,4:9))
ss <-
finaldf %>%
filter(Predicted_Compartment == "Mitochondria") %>%
dplyr::select(c(1,4:9)) %>%
gather("condition", "intensity", 2:7)
# Basic line plot with points
ggplot(data=df, aes(x=dose, y=len, group=Gene)) +
geom_line()+
geom_point()
ggplot(data=ss, aes(x=condition, y=intensity, group = Gene)) +
geom_line()
ggplot(data=ss, aes(x=condition, y=intensity, group = Gene)) +
geom_line(color = "red")
ggplot(data=ss, aes(x=condition, y=intensity, group = Gene)) +
geom_line(color = "red") +
theme_bw()
orgDist <-
finaldf %>%
filter(Predicted_Compartment == "Mitochondria") %>%
dplyr::select(c(1,4:9)) %>%
gather("condition", "intensity", 2:7)
ggplot(data=orgDist, aes(x=condition, y=intensity, group = Gene)) +
geom_line(color = "red") +
theme_bw()
library(ggfortify)
library(ComplexHeatmap)
library(gplots)
library(ggplot2)
library(data.table)
library(dplyr)
library(tidyr)
library(reshape2)
library(survMisc)
library(ggbio)
